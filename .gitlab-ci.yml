---
# ---------------------------------------------------------------------------
# Global
# ---------------------------------------------------------------------------
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .venv/
    - .cache/pip
    - .cache/pre-commit

stages:
  - lint
  - test
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'

# ---------------------------------------------------------------------------
# Templates
# ---------------------------------------------------------------------------
.install-deps-template: &install-deps
  before_script:
    - pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -vv --extras all
    - poetry run pre-commit install

.lint-template: &lint
  <<: *install-deps
  image: python:3.8
  stage: lint

.test-template: &test # Coverage needed too
  <<: *install-deps
  needs: []
  stage: test
  script: poetry run pytest tests/ --cov ra_utils/ --cov-fail-under=100 --hypothesis-show-statistics --hypothesis-profile ci

.deploy-template: &deploy
  <<: *install-deps
  image: python:3.8
  stage: deploy
  rules:
    # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

# ---------------------------------------------------------------------------
# Lint
# ---------------------------------------------------------------------------
Lint Project:
  <<: *lint
  script:
    - poetry run pre-commit run --all-files

# ---------------------------------------------------------------------------
# Test
# ---------------------------------------------------------------------------
Test on Python 3.8:
  <<: *test
  image: python:3.8

Test on Python 3.9:
  <<: *test
  image: python:3.9

# ---------------------------------------------------------------------------
# Deploy
# ---------------------------------------------------------------------------
Deploy to PyPI:
  <<: *deploy
  script: poetry publish --build -u OS2mo -p $PYPI_PWD


pages:
  <<: *install-deps
  image: python:3.8
  stage: deploy
  needs: []
  script:
    - poetry run mkdocs build --strict --site-dir public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
